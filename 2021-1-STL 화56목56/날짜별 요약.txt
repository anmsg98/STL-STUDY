4/29	: 반복자 설명, find 함수설명 및 직접 만들어보기

5/4	: find_if, count_if 설명 및 만들어보기, 반복자간의 거리를 계산하는 함수 my_distace 만들어보기

5/6	: my_distance 완성, copy 설명 및 만들어보기, back_inserter, set은 요소를 자동으로 정렬, set을
	  이용한 소스내용 오름차순 정렬

5/11	: set 정렬 계속, map 설명 및 그룹 만들어보기

5/13	: simap설명(dict랑 비슷한듯), 맵을 이용한 소스 내의 단어 빈도수, 알파벳 사용횟수 구하기, 랜덤엔진
	  을 사용한 유니폼 분포, unordered_set 설명, bucket_count(버킷의 원소)

5/18	: String을 해싱하는 템플릿 함수, 컨테이너(vector, set, unordered_set)들의 찾기 실력을 검증,
	  
5/20	: 찾기 실력 계속, operator==의 호출 수 비교, 알고리즘 함수 찾아보기 : 
	  partition(조건으로 분리된 지점의 iterator를 반환한다.)
	  
5/25	: sort함수, vector의 생성자, for_each(람다 내의 함수 실행) 직접 만들어도 봄, mismatch,
	  copy_backward(데이터를 뒤에서부터 삽입), move, sample을 이용한 로또번호 생성기,
	  stable_partition(조건에 맞게 나누고 순서대로 정렬)
	  
5/27	: rotate를 이용한 전광판 만들기, pair를 이용한 컨테이너 내의 쌍 만들기, sort -> 1등부터 끝까지 정렬
 	  stable_sort ->  equivalence 판단이 같은 원소의 상대 순위를 유지한다, partial_sort -> 1등부터 n등까지만 정렬
 	  nth_element -> n등과 나머지로 분류, shuffle(랜덤엔진을 이용하여 컨테이너 내의 요소를 섞음),
	  copy_if(조건에 맞는 요소 복사), next_permutation(모든 순열 출력)

6/1	: 단어들.txt 에 있는 요소 조사, unique(중복된 요소 검사), 애너그램 관계 단어 출력
	  (단어가 길면 next_permutation 함수가 효율적이지 못함), PS 구조체를 만들어 긴단어에 대해 효율적인 애너그램
	  쌍 찾기 수행
	  
6/3	: 단어들에 있는 모든 애너그램 쌍 출력, range 라이브러리 설명(c++20)
	  